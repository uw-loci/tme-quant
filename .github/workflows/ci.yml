name: ci

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]

jobs:
  test-basic:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --break-system-packages -e .
          python -m pip install --break-system-packages pytest pytest-cov ruff

      - name: Run basic tests (placeholder mode)
        env:
          TMEQ_RUN_CURVELETS: "0"
          QT_QPA_PLATFORM: "offscreen"
        run: |
          pytest -q -vv tests/curvealign_py/ tests/ctfire_py/ tests/test_unified_api.py tests/test_curvelops_basic.py

  # Secure build with CurveLab; skip on forked PRs (no secrets there).
  test-curvelab:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
    # If your secrets live in a GitHub Environment, uncomment the next line and set the name:
    # environment: ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc g++ make wget curl

      - name: Download and build FFTW 2.1.5
        run: |
          mkdir -p utils
          cd utils
          wget -O fftw-2.1.5.tar.gz http://www.fftw.org/fftw-2.1.5.tar.gz
          tar xzf fftw-2.1.5.tar.gz
          cd fftw-2.1.5
          ./configure --prefix="$(pwd)" --disable-fortran
          make -j"$(nproc)"
          make install
          ln -sf include fftw

      - name: Download CurveLab (secure server)
        env:
          RESTRICTED_USER: ${{ secrets.RESTRICTED_USER }}
          RESTRICTED_PASSWORD: ${{ secrets.RESTRICTED_PASSWORD }}
          RESTRICTED_URL: ${{ secrets.RESTRICTED_URL }}
        run: |
          set -euo pipefail
          cd utils

          echo "== Secret presence check =="
          for v in RESTRICTED_USER RESTRICTED_PASSWORD RESTRICTED_URL; do
            if [ -z "${!v:-}" ]; then
              echo "ERROR: $v is empty (check repo/org secrets or environment scoping)"; exit 1
            else
              echo "$v=SET"
            fi
          done

          echo "== Probe HTTP status with auth (follows redirects) =="
          code=$(curl -sS -o /dev/null -w "%{http_code}" -L \
                  --anyauth -u "${RESTRICTED_USER}:${RESTRICTED_PASSWORD}" \
                  "${RESTRICTED_URL}")
          echo "HTTP status after redirects: $code"
          if [ "$code" -ge 400 ]; then
            echo "Server rejected credentials or URL not a direct artifact (HTTP $code)."; exit 22
          fi

          echo "== Downloading CurveLab archive =="
          # --location-trusted allows sending auth to redirect target hosts you trust
          curl --fail --location --location-trusted --show-error --retry 3 --retry-delay 2 \
               --anyauth -u "${RESTRICTED_USER}:${RESTRICTED_PASSWORD}" \
               -o CurveLab-2.1.3.tar.gz \
               "${RESTRICTED_URL}"

          ls -lh CurveLab-2.1.3.tar.gz
          tar xzf CurveLab-2.1.3.tar.gz

      - name: Build CurveLab from source
        run: |
          cd utils/CurveLab-2.1.3
          cd fdct_wrapping_cpp/src && make && cd ../..
          cd fdct3d/src && make && cd ../../..

      - name: Set up environment variables
        run: |
          echo "FFTW=$(pwd)/utils/fftw-2.1.5" >> $GITHUB_ENV
          echo "FDCT=$(pwd)/utils/CurveLab-2.1.3" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(pwd)/utils/fftw-2.1.5/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(pwd)/utils/fftw-2.1.5/lib" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --break-system-packages -e ".[curvelops]"
          python -m pip install --break-system-packages pytest pytest-cov ruff

      - name: Test CurveLab compilation
        run: |
          echo "Testing CurveLab compilation..."
          test -f "utils/CurveLab-2.1.3/fdct_wrapping_cpp/src/fdct_wrapping_cpp" && echo "✅ fdct_wrapping_cpp built" || (echo "❌ fdct_wrapping_cpp missing"; exit 1)
          test -f "utils/CurveLab-2.1.3/fdct3d/src/fdct3d" && echo "✅ fdct3d built" || (echo "❌ fdct3d missing"; exit 1)

      - name: Run tests with CurveLab
        env:
          TMEQ_RUN_CURVELETS: "1"
          QT_QPA_PLATFORM: "offscreen"
        run: |
          python tests/test_curvelops_basic.py
          pytest -q -vv tests/curvealign_py/ tests/ctfire_py/ tests/test_unified_api.py tests/test_curvelops_basic.py
